Пример работы с 2 файлами:
1.Создайте файл main.cpp и объявите функцию hello:
2.Создайте файл f.cpp и также объявите функцию hello:
3.Попробуем скомпилировать оба файла вместе.
 При компиляции возникнет ошибка "multiple definition of 'hello'" из-за дублирования функции hello в обоих файлах.
 Компилятор не может определить, какую из них использовать.
4.Теперь определим функцию hello в файле f.cpp, но добавим модификатор static:
5.Попробуем скомпилировать оба файла с static int hello(int x).
 Теперь компиляция пройдет успешно, и в финальный исполняемый файл войдет только две версия функции глобальгая и статик.
6.Теперь перекопируем определение функции hello в файл main.cpp, включая модификатор static:
7.В финальный исполняемый файл скомпилируется только одна копия тела функции hello, и это будет та версия, которая видна в файле main.cpp. 
Файл f.cpp содержит свою собственную статическую версию, но она не будет использована вне файла f.cpp из-за модификатора static.

2.
Переменная a в static_1 и static_2 различается по своей области видимости и способу доступа:

В static_1 переменная a объявлена как глобальная переменная. 
Глобальные переменные видны во всем файле, в котором они объявлены.
В static_2 переменная a объявлена как статическая глобальная переменная, добавив ключевое слово static.
  Статические глобальные переменные если  объявлены в пределах функции с использованием ключевого слова static, то она будет иметь локальную область видимости и будет видна только в пределах этой функции. 
Чтобы сделать пример static_2 эквивалентным static_1 в плане невозможности импортировать переменную в другом файле,
 нужно удалить приписать слово static при объявлении переменной a в static_2.
