Пример работы с 2 файлами:
1.Создадим файл main.cpp и определим функцию hello:
2.Теперь создадим файл f.cpp и определим там также функцию hello:
3.Попробуем скомпилировать оба файла вместе.
 При компиляции возникнет ошибка "multiple definition of 'hello'" из-за дублирования функции hello в обоих файлах.
 Компилятор не может определить, какую из них использовать.
4.Теперь определим функцию hello в файле f.cpp, но добавим модификатор static:
5.Попробуем скомпилировать оба файла с static int hello(int x).
 Теперь компиляция пройдет успешно, и в финальный исполняемый файл войдет только одна версия функции hello (из f.cpp).
6.Теперь перекопируем определение функции hello в файл main.cpp, включая модификатор static:
7.В финальный исполняемый файл (executable) будет скомпилирована только одна копия тела функции hello.

2.
Переменная a в static_1 и static_2 различается по своей области видимости и способу доступа:

В static_1 переменная a объявлена как глобальная переменная. 
Глобальные переменные видны во всем файле, в котором они объявлены.
В static_2 переменная a объявлена как статическая глобальная переменная, добавив ключевое слово static.
 Статические глобальные переменные имеют локальную область видимости, они видны только в файле, в котором они объявлены.
Чтобы сделать пример static_2 эквивалентным static_1 в плане невозможности импортировать переменную в другом файле,
 нужно удалить ключевое слово static при объявлении переменной a в static_2.
